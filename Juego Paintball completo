#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <map>
#include <string>
#include <algorithm>  // Necesario para usar find

using namespace std;

// Clase Jugador
class Jugador {
private:
    string nombre;
    int nivelVida;
    string tipoJugador;
    bool rapido;
    int equipo;
    int x, y;

public:

    map<string, float> estadisticasPunteria;

    Jugador(string _nombre, string _tipo, bool _rapido)
        : nombre(_nombre), tipoJugador(_tipo), rapido(_rapido), nivelVida(3), equipo(0), x(0), y(0) {
        // Configuración de las probabilidades de puntería
        if (tipoJugador == "Experto") {
            estadisticasPunteria = { {"Torso", 0.60}, {"Extremidades", 0.35}, {"Cabeza", 0.05} };
        } else if (tipoJugador == "Novato") {
            estadisticasPunteria = { {"Torso", 0.25}, {"Extremidades", 0.50}, {"Cabeza", 0.25} };
        }
    }

    Jugador(string _nombre, int _equipo, int _x, int _y)
        : nombre(_nombre), equipo(_equipo), x(_x), y(_y), nivelVida(3), tipoJugador("Novato"), rapido(false) {}

    string obtenerNombre() const {
        return nombre;
    }

    int obtenerEquipo() const {
        return equipo;
    }

    int obtenerX() const {
        return x;
    }

    int obtenerY() const {
        return y;
    }

    void establecerPosicion(int nuevaX, int nuevaY) {
        x = nuevaX;
        y = nuevaY;
    }

    string getTipoJugador() const {
        return tipoJugador;
    }

    bool getRapido() const {
        return rapido;
    }

    int getNivelVida() const {
        return nivelVida;
    }

    void reducirVida(int cantidad) {
        nivelVida -= cantidad;
        if (nivelVida < 0) nivelVida = 0;
    }

    string descripcionCompleta() const {
        return getTipoJugador() + (getRapido() ? " Rapido" : " Lento");
    }

    bool estaMuerto() const {
    return nivelVida <= 0;
    }

    // Método para obtener la puntería de acuerdo con el tipo de ataque
    float obtenerProbabilidadPunteria(const string& parteCuerpo) const {
        if (estadisticasPunteria.find(parteCuerpo) != estadisticasPunteria.end()) {
            return estadisticasPunteria.at(parteCuerpo);
        }
        return 0.0f;
    }
};

// Clase Casilla
class Casilla {
private:
    bool tieneBandera;
    vector<string> jugadores;

public:
    Casilla() : tieneBandera(false) {}

    void colocarBandera() {
        tieneBandera = true;
    }

    bool esBandera() const {
        return tieneBandera;
    }

    bool agregarJugador(const string& nombreJugador) {
        // Añadir un jugador si no hay más de 4 jugadores en la casilla
        if (jugadores.size() < 4) {
            jugadores.push_back(nombreJugador);
            return true;
        }
        return false;
    }

    bool removerJugador(const string& nombreJugador) {
        auto it = find(jugadores.begin(), jugadores.end(), nombreJugador);
        if (it != jugadores.end()) {
            jugadores.erase(it);
            return true;
        }
        return false;
    }

    vector<string>& obtenerJugadores() {
        return jugadores;
    }

    bool tieneJugadores() {
       if (jugadores.size() >= 4) {
            return true;
        }
        return false;
    }
};

// Clase Equipo
class Equipo {
private:
    string color;
    vector<Jugador> jugadores;

public:
    Equipo(string _color) : color(_color) {}

void asignarJugadores(int cantidad) {
        for (int i = 0; i < cantidad; ++i) {
            string tipo;
            bool esRapido;
            float probabilidad = static_cast<float>(rand()) / RAND_MAX;

            //tipo de jugador según probabilidades
            if (probabilidad <= 0.15) {          //0.15-0.0=0.15
                tipo = "Experto";
                esRapido = true;
            } else if (probabilidad <= 0.40) {   //0.40-0.15=25
                tipo = "Experto";
                esRapido = false;
            } else if (probabilidad <= 0.65) {   //0.65-0.40=0.25
                tipo = "Novato";
                esRapido = true;
            } else {                             //1.0-0.65=0.35
                tipo = "Novato";
                esRapido = false;
            }

            string nombre = color[0] + to_string(i + 1); // Nombre del jugador (Ej: R1, R2)
            jugadores.emplace_back(Jugador(nombre, tipo, esRapido));
        }
    }

    vector<Jugador>& obtenerJugadores() {
        return jugadores;
    }

    const vector<Jugador>& obtenerJugadores() const {  // versión const
        return jugadores;
    }

    string obtenerColor() const {
        return color;
    }

    void mostrarEquipo() const {
        cout << "Equipo de color: " << color << endl;
        cout << "Jugadores:" << endl;
        for (const auto& jugador : jugadores) {
            cout << "- " << jugador.obtenerNombre() << " (" << jugador.descripcionCompleta() << ")" << endl;
        }
    }

    void Equipo::eliminarJugador(const string& nombre) {
    jugadores.erase(std::remove_if(jugadores.begin(), jugadores.end(), 
                                    [&nombre](const Jugador& j) { return j.obtenerNombre() == nombre; }),
                     jugadores.end());
    }

};

// Clase CampoBatalla
class CampoBatalla {
private:
    vector<vector<Casilla>> casillas;
    int filas;
    int columnas;
    vector<Equipo> equipos;

public:
    CampoBatalla(int m, int n) {
        if (m < 3 || m > 10 || n < 4 || n > 10) {
            throw invalid_argument("El tamano del tablero debe ser de 3x4 a 10x10.");
        }
        filas = m;
        columnas = n + 2; // Aumentamos 2 columnas para las banderas
        casillas = vector<vector<Casilla>>(filas, vector<Casilla>(columnas)); // Inicializar las casillas
    }

    vector<Equipo>& obtenerEquipos() {
        return equipos;
    }

    void agregarEquipos(const vector<string>& colores, int jugadoresPorEquipo) {
        for (const string& color : colores) {
            Equipo equipo(color);
            equipo.asignarJugadores(jugadoresPorEquipo);
            equipos.push_back(equipo);
        }
    }

    void colocarEquipos() {
        int numEquipos = equipos.size();
        int jugadoresPorEquipo = equipos[0].obtenerJugadores().size();

        // Para cada equipo, colocar sus jugadores en las columnas 1 y penúltima
        for (int i = 0; i < numEquipos; ++i) {
            vector<Jugador>& jugadores = equipos[i].obtenerJugadores();  // Usar no-const en esta parte
            int columnaInicio = (i == 0) ? 1 : columnas - 2;  // Columna 1 para el equipo 1, penúltima columna para el equipo 2

            for (int j = 0; j < jugadores.size(); ++j) {
                bool colocado = false;
                // Encontramos la primera fila vacía para colocar al jugador
                for (int k = 0; k < filas; ++k) {
                    if (casillas[k][columnaInicio].obtenerJugadores().size() == 0) {
                        casillas[k][columnaInicio].agregarJugador(jugadores[j].obtenerNombre());
                        jugadores[j].establecerPosicion(k, columnaInicio);
                        colocado = true;
                        break;
                    }
                }
                if (!colocado) {
                    cout << "No se pudo colocar al jugador " << jugadores[j].obtenerNombre() << " en la columna " << columnaInicio << endl;
                }
            }
        }
    }

    void colocarBanderas() {
        for (int i = 0; i < filas; i++) {
            casillas[i][0].colocarBandera(); // Bandera en la columna 0
            casillas[i][columnas - 1].colocarBandera(); // Bandera en la última columna
        }
    }

    void imprimirTablero() {
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                if (casillas[i][j].esBandera()) {
                    cout << "[B] "; // Representa una bandera
                } else if (!casillas[i][j].obtenerJugadores().empty()) {
                    cout << "[" << casillas[i][j].obtenerJugadores()[0] << "] "; // Mostrar el primer jugador
                } else {
                    cout << "[ ] "; // Casilla vacía
                }
            }
            cout << endl;
        }
    }

    void mostrarEquipos() const {
        for (const auto& equipo : equipos) {
            equipo.mostrarEquipo();
        }
    }

    // Método para mover un jugador a una nueva posición
    bool moverJugador(const string& nombreJugador, int nuevaX, int nuevaY) {
        if (nuevaX < 0 || nuevaX >= filas || nuevaY < 0 || nuevaY >= columnas) {
            cout << "Movimiento invalido: fuera de los limites del tablero." << endl;
            return false;
        }

        for (auto& equipo : equipos) {
            for (auto& jugador : equipo.obtenerJugadores()) {
                if (jugador.obtenerNombre() == nombreJugador) {
                    int actualX = jugador.obtenerX();
                    int actualY = jugador.obtenerY();

                    if (casillas[nuevaX][nuevaY].tieneJugadores()) {
                        cout << "Movimiento invalido: la casilla esta ocupada." << endl;
                        return false;
                    }

                    // Remover al jugador de la casilla actual
                    casillas[actualX][actualY].removerJugador(nombreJugador);

                    // Agregar al jugador a la nueva casilla
                    casillas[nuevaX][nuevaY].agregarJugador(nombreJugador);
                    jugador.establecerPosicion(nuevaX, nuevaY);

                    return true;
                }
            }
        }
        return false;
    }

    void verificarMuertes() {
    for (auto& equipo : equipos) {
        for (auto& jugador : equipo.obtenerJugadores()) {
            if (jugador.estaMuerto()) {
                // Aquí podrías eliminar al jugador del tablero
                cout << jugador.obtenerNombre() << " ha muerto.\n";
                // Eliminarlo de la casilla y del equipo
                for (int fila = 0; fila < filas; ++fila) {
                    for (int columna = 0; columna < columnas; ++columna) {
                        casillas[fila][columna].removerJugador(jugador.obtenerNombre());
                        }
                    }
                }
            }
        }
    }

    // Función para verificar si el juego ha iniciado correctamente
    bool verificarInicioJuego() {
        // Verificar que todos los equipos tengan jugadores asignados
        for (const auto& equipo : equipos) {
            if (equipo.obtenerJugadores().empty()) {
                cout << "Error: El equipo " << equipo.obtenerColor() << " no tiene jugadores.\n";
                return false;
            }
        }

        // Verificar que las banderas han sido colocadas
        bool banderasColocadas = true;
        for (int i = 0; i < filas; i++) {
            if (!casillas[i][0].esBandera() || !casillas[i][columnas - 1].esBandera()) {
                banderasColocadas = false;
                break;
            }
        }

        if (!banderasColocadas) {
            cout << "Error: Las banderas no estan colocadas correctamente.\n";
            return false;
        }

        cout << "¡El juego ha iniciado correctamente!\n";
        return true;
    }

    bool verificarFinJuego() {
    // Verificar si algún equipo pierde porque todos sus jugadores están muertos
    for (const auto& equipo : equipos) {
        bool todosMuertos = true;
        for (const auto& jugador : equipo.obtenerJugadores()) {
            if (jugador.getNivelVida() > 0) {
                todosMuertos = false;
                break;
            }
        }
        if (todosMuertos) {
            cout << "El equipo " << equipo.obtenerColor() << " ha perdido porque todos sus jugadores estan muertos.\n";
            return true;
        }
    }

    // Verificar si todos los jugadores de un equipo están en sus banderas
    for (int i = 0; i < equipos.size(); ++i) {
        bool todosEnBandera = true;
        const auto& equipo = equipos[i];
        for (const auto& jugador : equipo.obtenerJugadores()) {
            bool enBandera = false;
            for (int fila = 0; fila < filas; ++fila) {
                int columnaBandera = (i == 0) ? 0 : columnas - 1;
                if (find(casillas[fila][columnaBandera].obtenerJugadores().begin(),
                         casillas[fila][columnaBandera].obtenerJugadores().end(),
                         jugador.obtenerNombre()) != casillas[fila][columnaBandera].obtenerJugadores().end()) {
                    enBandera = true;
                    break;
                }
            }
            if (!enBandera) {
                todosEnBandera = false;
                break;
            }
        }
        if (todosEnBandera) {
            cout << "El equipo " << equipo.obtenerColor() << " ha ganado porque todos sus jugadores están en sus banderas.\n";
            return true;
        }
    }

    // Verificar si algún jugador alcanza la bandera del equipo contrario
    for (int i = 0; i < equipos.size(); ++i) {
        const auto& equipo = equipos[i];
        int columnaBanderaContraria = (i == 0) ? columnas - 1 : 0;
        for (const auto& jugador : equipo.obtenerJugadores()) {
            for (int fila = 0; fila < filas; ++fila) {
                if (find(casillas[fila][columnaBanderaContraria].obtenerJugadores().begin(),
                         casillas[fila][columnaBanderaContraria].obtenerJugadores().end(),
                         jugador.obtenerNombre()) != casillas[fila][columnaBanderaContraria].obtenerJugadores().end()) {
                    cout << "El jugador " << jugador.obtenerNombre() << " del equipo " << equipo.obtenerColor()
                         << " ha ganado al alcanzar la bandera del equipo contrario.\n";
                    return true;
                }
            }
        }
    }

    // Si no se cumple ninguna condición de fin de juego
    return false;
}


    void atacar(string atacante, string objetivo) {
    for (auto& equipo : equipos) {
        for (auto& jugador : equipo.obtenerJugadores()) {
            if (jugador.obtenerNombre() == atacante) {
                // Generar una probabilidad aleatoria para determinar el objetivo del ataque
                float probabilidad = static_cast<float>(rand()) / RAND_MAX;

                // Seleccionar la parte del cuerpo usando las probabilidades acumuladas
                string parteCuerpo;
                float acumulado = 0.0f;
                for (const auto& punteria : jugador.estadisticasPunteria) {
                    acumulado += punteria.second;  // Sumar probabilidad acumulada
                    if (probabilidad <= acumulado) {
                        parteCuerpo = punteria.first;  // Seleccionar la parte del cuerpo
                        break;
                    }
                }

                // Verificar que el objetivo exista y que no esté muerto
                Jugador* objetivoJugador = nullptr;
                for (auto& equipoObjetivo : equipos) {
                    for (auto& jugadorObjetivo : equipoObjetivo.obtenerJugadores()) {
                        if (jugadorObjetivo.obtenerNombre() == objetivo) {
                            objetivoJugador = &jugadorObjetivo;
                            break;
                        }
                    }
                    if (objetivoJugador) break;
                }

                if (objetivoJugador) {
                    // Determinar si el ataque fue exitoso
                    bool ataqueExitoso = false;
                    if (!parteCuerpo.empty() && probabilidad <= jugador.obtenerProbabilidadPunteria(parteCuerpo)) {
                        ataqueExitoso = true;
                    }

                    // Aplicar daño al objetivo si el ataque fue exitoso
                    if (ataqueExitoso) {
                        cout << atacante << " ataco a " << objetivo << " en el " << parteCuerpo << ". ¡Exito!\n";

                        // Reducir vida dependiendo de la parte del cuerpo
                        int dano = 1;  // Asumimos que cada ataque reduce 1 de vida
                        if (parteCuerpo == "Cabeza") {
                            dano = 2;  // Un ataque a la cabeza es más dañino
                        }

                        objetivoJugador->reducirVida(dano);

                        // Verificar si el jugador objetivo murió
                        if (objetivoJugador->getNivelVida() == 0) {
                            cout << objetivo << " ha muerto.\n";
                        }

                        // Si el ataque fue a la cabeza, el atacante también queda eliminado
                        if (parteCuerpo == "Cabeza") {
                            cout << atacante << " ha disparado a la cabeza y queda eliminado.\n";

                            // Eliminar al atacante del juego (se asume que hay un método para eliminar jugadores)
                            for (auto& equipo : equipos) {
                                equipo.eliminarJugador(atacante);
                            }
                        }
                    } else {
                        cout << atacante << " fallo el ataque a " << objetivo << ".\n";
                    }
                } else {
                    cout << "El objetivo " << objetivo << " no existe o ya esta muerto.\n";
                }

                return;  // Salir después de procesar el ataque
                }
            }
        }
    }

};

// Clase Turno
class Turno {
private:
    int turnoActual; // 1 o 2 (equipo actual)

public:
    // Constructor
    Turno() : turnoActual(1) {} // Inicia con el equipo 1

    // Obtener el turno actual
    int getTurnoActual() const {
        return turnoActual;
    }

    // Cambiar de turno
    void cambiarTurno() {
        turnoActual = (turnoActual == 1) ? 2 : 1;
    }

    // Obtener el equipo actual en formato 'X' o 'O'
    char getEquipoActual() const {
        return (turnoActual == 1) ? 'X' : 'O';
    }
};

int main() {
    srand(time(0));

    // Preguntar al usuario por el modo de juego
    string modoJuego;
    cout << "Selecciona el modo de juego (aleatorio/estandar): ";
    cin >> modoJuego;

    // Crear el campo de batalla
    int filas, columnas;
    int jugadoresPorEquipo;

    if (modoJuego == "aleatorio") {
        filas = rand() % 8 + 3; // Filas entre 3 y 10
        jugadoresPorEquipo = rand() % 5 + 1; // Entre 1 y 5 jugadores por equipo
        columnas = rand() % 7 + 4; // Columnas entre 4 y 10
        cout << "Modo aleatorio seleccionado. Tamano del tablero: " << filas << "x" << columnas << ". Jugadores por equipo: " << jugadoresPorEquipo << endl;
    } else {
        cout << "Selecciona el tamano del tablero (filas y columnas):\n";
        cout << "Filas (3-10): ";
        cin >> filas;
        cout << "Columnas (4-10): ";
        cin >> columnas;
        cout << "Ingresa la cantidad de jugadores por equipo: ";
        cin >> jugadoresPorEquipo;
    }

    try {
        CampoBatalla batalla(filas, columnas);

        // Agregar equipos al campo de batalla
        vector<string> colores = {"Azul", "Rojo"};
        batalla.agregarEquipos(colores, jugadoresPorEquipo);

        // Colocar los equipos y banderas en el tablero
        batalla.colocarEquipos();
        batalla.colocarBanderas();

        // Mostrar el tablero y equipos iniciales
        batalla.imprimirTablero();
        batalla.mostrarEquipos();

        // Verificar que el juego haya iniciado correctamente
        if (!batalla.verificarInicioJuego()) {
            return 1;
        }

        // Ciclo principal del juego
        Turno turno;
        bool juegoTerminado = false;
        while (!juegoTerminado) {
            cout << "\nTurno del equipo: " << (turno.getEquipoActual() == 'X' ? "Azul" : "Rojo") << endl;

            // Mostrar el estado del tablero
            batalla.imprimirTablero();

            // Realizar movimiento o ataque
            string accion;
            cout << "Selecciona accion (mover/atacar): ";
            cin >> accion;

            if (accion == "mover") {
                string nombreJugador;
                int nuevaX, nuevaY;
                cout << "Nombre del jugador a mover: ";
                cin >> nombreJugador;
                cout << "Nueva posicion (fila columna): ";
                cin >> nuevaX >> nuevaY;

                if (batalla.moverJugador(nombreJugador, nuevaX, nuevaY)) {
                    cout << "Jugador " << nombreJugador << " movido exitosamente.\n";
                } else {
                    cout << "Movimiento invalido.\n";
                }
            } else if (accion == "atacar") {
                string atacante, objetivo;
                cout << "Nombre del atacante: ";
                cin >> atacante;
                cout << "Nombre del objetivo: ";
                cin >> objetivo;

                batalla.atacar(atacante, objetivo);
            } else {
                cout << "Accion no valida.\n";
            }

            // Verificar si el juego ha terminado
    if (batalla.verificarFinJuego()) {
        cout << "¡El juego ha terminado!" << endl;
        juegoTerminado = true;
        break; // Salir del ciclo si el juego termina
    }

            // Cambiar el turno
            turno.cambiarTurno();
        }

    } catch (const invalid_argument& e) {
        cerr << "Error: " << e.what() << endl;
        return 1;
    }

    return 0;
}
