#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <map>
using namespace std;

// Clase campoBatalla
class campoBatalla {
private:
    vector<vector<Casilla>> casillas;
    int filas;
    int columnas;
    vector<Equipo> equipos;

public:
    campoBatalla(int m, int n) {
        if (m < 3 || m > 10 || n < 4 || n > 10) {
            throw invalid_argument("El tamaño del tablero debe ser de 3x4 a 10x10.");
        }
        filas = m;
        columnas = n + 2; // Aumentamos 2 columnas para las banderas
        casillas = vector<vector<Casilla>>(filas, vector<Casilla>(columnas)); // Inicializar las casillas
    }

    void agregarEquipos(const vector<string>& colores, int jugadoresPorEquipo) {
        for (const string& color : colores) {
            Equipo equipo(color);
            equipo.asignarJugadores(jugadoresPorEquipo);
            equipos.push_back(equipo);
        }
    }

    void colocarEquipos() {
        int numEquipos = equipos.size();
        int jugadoresPorEquipo = equipos[0].obtenerJugadores().size();

        // Para cada equipo, colocar sus jugadores en las columnas 1 y penúltima
        for (int i = 0; i < numEquipos; ++i) {
            vector<Jugador>& jugadores = equipos[i].obtenerJugadores();  // Usar no-const en esta parte
            int columnaInicio = (i == 0) ? 1 : columnas - 2;  // Columna 1 para el equipo 1, penúltima columna para el equipo 2

            for (int j = 0; j < jugadores.size(); ++j) {
                bool colocado = false;
                // Encontramos la primera fila vacía para colocar al jugador
                for (int k = 0; k < filas; ++k) {
                    if (casillas[k][columnaInicio].obtenerJugadores().size() == 0) {
                        casillas[k][columnaInicio].agregarJugador(jugadores[j].obtenerNombre());
                        colocado = true;
                        break;
                    }
                }
                if (!colocado) {
                    cout << "No se pudo colocar al jugador " << jugadores[j].obtenerNombre() << " en la columna " << columnaInicio << endl;
                }
            }
        }
    }

    void colocarBanderas() {
        for (int i = 0; i < filas; i++) {
            casillas[i][0].colocarBandera(); // Bandera en la columna 0
            casillas[i][columnas - 1].colocarBandera(); // Bandera en la última columna
        }
    }

    void imprimirTablero() {
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                if (casillas[i][j].esBandera()) {
                    cout << "[B] "; // Representa una bandera
                } else if (!casillas[i][j].obtenerJugadores().empty()) {
                    cout << "[" << casillas[i][j].obtenerJugadores()[0] << "] "; // Mostrar el primer jugador
                } else {
                    cout << "[ ] "; // Casilla vacía
                }
            }
            cout << endl;
        }
    }

    void mostrarEquipos() const {
        for (const auto& equipo : equipos) {
            equipo.mostrarEquipo();
        }
    }

    // Función para verificar si el juego ha iniciado correctamente
    bool verificarInicioJuego() {
        // Verificar que todos los equipos tengan jugadores asignados
        for (const auto& equipo : equipos) {
            if (equipo.obtenerJugadores().empty()) {
                cout << "Error: El equipo " << equipo.obtenerColor() << " no tiene jugadores.\n";
                return false;
            }
        }

        // Verificar que las banderas han sido colocadas
        bool banderasColocadas = true;
        for (int i = 0; i < filas; i++) {
            if (!casillas[i][0].esBandera() || !casillas[i][columnas - 1].esBandera()) {
                banderasColocadas = false;
                break;
            }
        }

        if (!banderasColocadas) {
            cout << "Error: Las banderas no están colocadas correctamente.\n";
            return false;
        }

        cout << "¡El juego ha iniciado correctamente!\n";
        return true;
    }
};

// Funciones para crear tableros
void crearTableroAleatorio() {
    int filas = rand() % 8 + 3;    // Aleatorio entre 3 y 10
    int columnas = rand() % 7 + 4; // Aleatorio entre 4 y 10

    campoBatalla tablero(filas, columnas);  // Se crea un tablero con dimensiones aleatorias
    tablero.agregarEquipos({"Rojo", "Azul"}, filas); // Se crean 2 equipos con jugadores igual a filas
    tablero.colocarEquipos(); // Se colocan jugadores
    tablero.colocarBanderas();    // Se colocan banderas
    tablero.imprimirTablero();    // Mostrar el tablero
    tablero.mostrarEquipos();     // Mostrar los equipos y jugadores
}

void crearTableroEstandar() {
    const int filas = 4;
    const int columnas = 7;

    campoBatalla tablero(filas, columnas);  // Crear un tablero estándar de 4x7
    tablero.agregarEquipos({"Rojo", "Azul"}, filas); // Se crean 2 equipos con jugadores igual a filas
    tablero.colocarEquipos(); // Se colocan jugadores
    tablero.colocarBanderas();    // Se colocan banderas
    tablero.imprimirTablero();    // Mostrar el tablero
    tablero.mostrarEquipos();     // Mostrar los equipos y jugadores
}

int main() {
    srand(time(0));

    // Menú de opciones
    cout << "Selecciona una opcion para el tablero:\n";
    cout << "1. Tablero aleatorio entre 3x4 y 10x10\n";
    cout << "2. Tablero estandar de 7x4\n";
    cout << "Opcion: ";

    int opcion;
    cin >> opcion;

    if (opcion == 1) {
        crearTableroAleatorio();
    } else if (opcion == 2) {
        crearTableroEstandar();
    } else {
        cout << "Opcion no valida. Por favor selecciona 1 o 2.\n";
    }

    return 0;
}
