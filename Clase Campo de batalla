#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <map>
using namespace std;

// clase campoBatalla
class campoBatalla {
private:
    vector<vector<Casilla>> casillas;
    int filas;
    int columnas;
    vector<Equipo> equipos;

public:
    campoBatalla(int m, int n) {
        if (m < 3 || m > 10 || n < 4 || n > 10) {
            throw invalid_argument("El tamaño del tablero debe ser de 3x4 a 10x10.");
        }
        filas = m;
        columnas = n + 2; // aumentamos 2 columnas para las banderas
        casillas = vector<vector<Casilla>>(filas, vector<Casilla>(columnas)); // inicializar las casillas
    }

    void agregarEquipos(const vector<string>& colores, int jugadoresPorEquipo) {
        for (const string& color : colores) {
            Equipo equipo(color);
            equipo.asignarJugadores(jugadoresPorEquipo);
            equipos.push_back(equipo);
        }
    }

    void colocarEquipos() {
        int numEquipos = equipos.size();
        for (int i = 0; i < numEquipos; ++i) {
            vector<Jugador>& jugadores = equipos[i].obtenerJugadores();
            for (size_t j = 0; j < jugadores.size(); ++j) {
                if (i == 0) {
                    // equipo 1 (primera columna, equipo rojo)
                    casillas[j][1].agregarJugador(jugadores[j].obtenerNombre());
                } else if (i == 1) {
                    // equipo 2 (penúltima columna, equipo azul)
                    casillas[j][columnas - 2].agregarJugador(jugadores[j].obtenerNombre());
                }
            }
        }
    }

    void colocarBanderas() {
        for (int i = 0; i < filas; i++) {
            casillas[i][0].colocarBandera(); // bandera en la columna 0
            casillas[i][columnas - 1].colocarBandera(); // bandera en la última columna
        }
    }

    void imprimirTablero() {
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                if (casillas[i][j].esBandera()) {
                    cout << "[B] "; // representa una bandera
                } else if (!casillas[i][j].obtenerJugadores().empty()) {
                    cout << "[" << casillas[i][j].obtenerJugadores()[0] << "] "; // mostrar el primer jugador
                } else {
                    cout << "[ ] "; // casilla vacia
                }
            }
            cout << endl;
        }
    }

    void mostrarEquipos() const {
        for (const auto& equipo : equipos) {
            equipo.mostrarEquipo();
        }
    }

    // metodo para atacar a otro jugador
    void atacar(const string& atacanteNombre, const string& objetivoNombre) {
        Jugador* atacante = nullptr;
        Jugador* objetivo = nullptr;

        // buscar los jugadores en los equipos
        for (auto& equipo : equipos) {
            for (auto& jugador : equipo.obtenerJugadores()) {
                if (jugador.obtenerNombre() == atacanteNombre) atacante = &jugador;
                if (jugador.obtenerNombre() == objetivoNombre) objetivo = &jugador;
            }
        }

        if (!atacante || !objetivo) {
            cout << "Atacante u objetivo no encontrados.\n";
            return;
        }

        // determinar la parte del cuerpo a atacar (por ejemplo, torso, extremidades, cabeza)
        string partes[] = {"Torso", "Extremidades", "Cabeza"};
        string parteCuerpo = partes[rand() % 3]; // elegir aleatoriamente una parte del cuerpo para atacar

        float probabilidadAtacar = atacante->obtenerProbabilidadPunteria(parteCuerpo);
        float probabilidad = static_cast<float>(rand()) / RAND_MAX; // generar un numero aleatorio entre 0 y 1

        if (probabilidad < probabilidadAtacar) {
            cout << atacanteNombre << " ataca a " << objetivoNombre << " y acierta en el " << parteCuerpo << ".\n";
            // dependiendo del lugar atacado, se puede restar vida
            if (parteCuerpo == "Torso") {
                objetivo->nivelVida -= 1;
            } else if (parteCuerpo == "Extremidades") {
                objetivo->nivelVida -= 1;
            } else if (parteCuerpo == "Cabeza") {
                objetivo->nivelVida -= 2; // cabeza es mas letal
            }
        } else {
            cout << atacanteNombre << " ataca a " << objetivoNombre << " y falla.\n";
        }
    }
};

// funciones para crear tableros
void crearTableroAleatorio() {
    int filas = rand() % 8 + 3;    // aleatorio entre 3 y 10
    int columnas = rand() % 7 + 4; // aleatorio entre 4 y 10

    campoBatalla tablero(filas, columnas);  // se crea un tablero con dimensiones aleatorias
    tablero.agregarEquipos({"Rojo", "Azul"}, filas); // se crean 2 equipos con jugadores igual a filas
    tablero.colocarEquipos(); // se colocan jugadores
    tablero.colocarBanderas();    // se colocan banderas
    tablero.imprimirTablero();    // mostrar el tablero
    tablero.mostrarEquipos();     // mostrar los equipos y jugadores
}

void crearTableroEstandar() {
    const int filas = 4;
    const int columnas = 7;

    campoBatalla tablero(filas, columnas);  // crear un tablero estándar de 4x5, mas 2 columnas extra para banderas
    tablero.agregarEquipos({"Rojo", "Azul"}, filas); // se crean 2 equipos con jugadores igual a filas
    tablero.colocarEquipos(); // se colocan jugadores
    tablero.colocarBanderas();    // se colocan banderas
    tablero.imprimirTablero();    // mostrar el tablero
    tablero.mostrarEquipos();     // mostrar los equipos y jugadores
}

int main() {
    srand(time(0));

    // menu de opciones
    cout << "Selecciona una opcion para el tablero:\n";
    cout << "1. Tablero aleatorio entre 3x4 y 10x10\n";
    cout << "2. Tablero estandar de 7x4\n";
    cout << "Opcion: ";

    int opcion;
    cin >> opcion;

    if (opcion == 1) {
        crearTableroAleatorio();
    } else if (opcion == 2) {
        crearTableroEstandar();
    } else {
        cout << "Opcion no valida. Por favor selecciona 1 o 2.\n";
    }

    return 0;
}
