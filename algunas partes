#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <map>
#include <string>
#include <algorithm>  // Necesario para usar find

using namespace std;

// Clase Jugador
class Jugador {
private:
    string nombre;
    int nivelVida;
    string tipoJugador;
    bool rapido;
    map<string, float> estadisticasPunteria;

public:
    Jugador(string _nombre, string _tipo, bool _rapido)
        : nombre(_nombre), tipoJugador(_tipo), rapido(_rapido), nivelVida(3) {
        // Configuración de las probabilidades de puntería
        if (tipoJugador == "Experto") {
            estadisticasPunteria = {{"Torso", 0.60}, {"Extremidades", 0.85}, {"Cabeza", 0.05}};
        } else if (tipoJugador == "Novato") {
            estadisticasPunteria = {{"Torso", 0.10}, {"Extremidades", 0.50}, {"Cabeza", 0.25}};
        }
    }

    string obtenerNombre() const {
        return nombre;
    }

    string getTipoJugador() const {
        return tipoJugador;
    }

    bool getRapido() const {
        return rapido;
    }

    int getNivelVida() const {
        return nivelVida;
    }

    void reducirVida(int cantidad) {
        nivelVida -= cantidad;
        if (nivelVida < 0) nivelVida = 0;
    }

    string descripcionCompleta() const {
        return getTipoJugador() + (getRapido() ? " Rapido" : " Lento");
    }

    // Método para obtener la puntería de acuerdo con el tipo de ataque
    float obtenerProbabilidadPunteria(const string& parteCuerpo) const {
        if (estadisticasPunteria.find(parteCuerpo) != estadisticasPunteria.end()) {
            return estadisticasPunteria.at(parteCuerpo);
        }
        return 0.0f;
    }
};

// Clase Casilla
class Casilla {
private:
    bool tieneBandera;
    vector<string> jugadores;

public:
    Casilla() : tieneBandera(false) {}

    void colocarBandera() {
        tieneBandera = true;
    }

    bool esBandera() const {
        return tieneBandera;
    }

    bool agregarJugador(const string& nombreJugador) {
        // Añadir un jugador si no hay más de 4 jugadores en la casilla
        if (jugadores.size() < 4) {
            jugadores.push_back(nombreJugador);
            return true;
        }
        return false;
    }

    bool removerJugador(const string& nombreJugador) {
        auto it = find(jugadores.begin(), jugadores.end(), nombreJugador);
        if (it != jugadores.end()) {
            jugadores.erase(it);
            return true;
        }
        return false;
    }

    vector<string>& obtenerJugadores() {
        return jugadores;
    }

    bool tieneJugadores() const {
        return !jugadores.empty();
    }
};

// Clase Equipo
class Equipo {
private:
    string color;
    vector<Jugador> jugadores;

public:
    Equipo(string _color) : color(_color) {}

    void asignarJugadores(int cantidad) {
        for (int i = 0; i < cantidad; ++i) {
            string tipo = (rand() % 2 == 0) ? "Experto" : "Novato";
            bool esRapido = (rand() % 2 == 0);
            string nombre = color.substr(0, 1) + to_string(i + 1);  // R1, R2, A1, A2, etc.
            jugadores.emplace_back(Jugador(nombre, tipo, esRapido));
        }
    }

    vector<Jugador>& obtenerJugadores() {
        return jugadores;
    }

    const vector<Jugador>& obtenerJugadores() const {  // versión const
        return jugadores;
    }

    string obtenerColor() const {
        return color;
    }

    void mostrarEquipo() const {
        cout << "Equipo de color: " << color << endl;
        cout << "Jugadores:" << endl;
        for (const auto& jugador : jugadores) {
            cout << "- " << jugador.obtenerNombre() << " (" << jugador.descripcionCompleta() << ")" << endl;
        }
    }
};

// Clase campoBatalla
class campoBatalla {
private:
    vector<vector<Casilla>> casillas;
    int filas;
    int columnas;
    vector<Equipo> equipos;

public:
    campoBatalla(int m, int n) {
        if (m < 3 || m > 10 || n < 4 || n > 10) {
            throw invalid_argument("El tamaño del tablero debe ser de 3x4 a 10x10.");
        }
        filas = m;
        columnas = n + 2; // Aumentamos 2 columnas para las banderas
        casillas = vector<vector<Casilla>>(filas, vector<Casilla>(columnas)); // Inicializar las casillas
    }

    void agregarEquipos(const vector<string>& colores, int jugadoresPorEquipo) {
        for (const string& color : colores) {
            Equipo equipo(color);
            equipo.asignarJugadores(jugadoresPorEquipo);
            equipos.push_back(equipo);
        }
    }

    void colocarEquipos() {
        int numEquipos = equipos.size();
        int jugadoresPorEquipo = equipos[0].obtenerJugadores().size();

        // Para cada equipo, colocar sus jugadores en las columnas 1 y penúltima
        for (int i = 0; i < numEquipos; ++i) {
            vector<Jugador>& jugadores = equipos[i].obtenerJugadores();  // Usar no-const en esta parte
            int columnaInicio = (i == 0) ? 1 : columnas - 2;  // Columna 1 para el equipo 1, penúltima columna para el equipo 2

            for (int j = 0; j < jugadores.size(); ++j) {
                bool colocado = false;
                // Encontramos la primera fila vacía para colocar al jugador
                for (int k = 0; k < filas; ++k) {
                    if (casillas[k][columnaInicio].obtenerJugadores().size() == 0) {
                        casillas[k][columnaInicio].agregarJugador(jugadores[j].obtenerNombre());
                        colocado = true;
                        break;
                    }
                }
                if (!colocado) {
                    cout << "No se pudo colocar al jugador " << jugadores[j].obtenerNombre() << " en la columna " << columnaInicio << endl;
                }
            }
        }
    }

    void colocarBanderas() {
        for (int i = 0; i < filas; i++) {
            casillas[i][0].colocarBandera(); // Bandera en la columna 0
            casillas[i][columnas - 1].colocarBandera(); // Bandera en la última columna
        }
    }

    void imprimirTablero() {
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                if (casillas[i][j].esBandera()) {
                    cout << "[B] "; // Representa una bandera
                } else if (!casillas[i][j].obtenerJugadores().empty()) {
                    cout << "[" << casillas[i][j].obtenerJugadores()[0] << "] "; // Mostrar el primer jugador
                } else {
                    cout << "[ ] "; // Casilla vacía
                }
            }
            cout << endl;
        }
    }

    void mostrarEquipos() const {
        for (const auto& equipo : equipos) {
            equipo.mostrarEquipo();
        }
    }

    // Función para verificar si el juego ha iniciado correctamente
    bool verificarInicioJuego() {
        // Verificar que todos los equipos tengan jugadores asignados
        for (const auto& equipo : equipos) {
            if (equipo.obtenerJugadores().empty()) {
                cout << "Error: El equipo " << equipo.obtenerColor() << " no tiene jugadores.\n";
                return false;
            }
        }

        // Verificar que las banderas han sido colocadas
        bool banderasColocadas = true;
        for (int i = 0; i < filas; i++) {
            if (!casillas[i][0].esBandera() || !casillas[i][columnas - 1].esBandera()) {
                banderasColocadas = false;
                break;
            }
        }

        if (!banderasColocadas) {
            cout << "Error: Las banderas no están colocadas correctamente.\n";
            return false;
        }

        cout << "¡El juego ha iniciado correctamente!\n";
        return true;
    }

    // Mover al jugador
    void mover(string nombreJugador, string direccion) {
        for (auto& equipo : equipos) {
            for (auto& jugador : equipo.obtenerJugadores()) {
                if (jugador.obtenerNombre() == nombreJugador) {
                    int x = -1, y = -1;
                    // Buscar la casilla en el tablero que contiene al jugador
                    for (int i = 0; i < filas; ++i) {
                        for (int j = 0; j < columnas; ++j) {
                            if (casillas[i][j].tieneJugadores() && casillas[i][j].obtenerJugadores()[0] == nombreJugador) {
                                x = i;
                                y = j;
                                break;
                            }
                        }
                        if (x != -1) break;
                    }

                    if (x == -1 || y == -1) {
                        cout << "Jugador no encontrado en el tablero.\n";
                        return;
                    }

                    // Determinar la nueva posición según la dirección
                    if (direccion == "arriba" && x > 0) {
                        casillas[x][y].removerJugador(nombreJugador);
                        casillas[x - 1][y].agregarJugador(nombreJugador);
                    } else if (direccion == "abajo" && x < filas - 1) {
                        casillas[x][y].removerJugador(nombreJugador);
                        casillas[x + 1][y].agregarJugador(nombreJugador);
                    } else if (direccion == "izquierda" && y > 0) {
                        casillas[x][y].removerJugador(nombreJugador);
                        casillas[x][y - 1].agregarJugador(nombreJugador);
                    } else if (direccion == "derecha" && y < columnas - 1) {
                        casillas[x][y].removerJugador(nombreJugador);
                        casillas[x][y + 1].agregarJugador(nombreJugador);
                    } else {
                        cout << "Movimiento inválido.\n";
                    }
                    return;
                }
            }
        }
    }

    // Atacar a otro jugador
    void atacar(string atacante, string objetivo) {
        // Implementación de ataque con probabilidades según puntería
        for (auto& equipo : equipos) {
            for (auto& jugador : equipo.obtenerJugadores()) {
                if (jugador.obtenerNombre() == atacante) {
                    float probabilidad = static_cast<float>(rand()) / RAND_MAX;
                    string parteCuerpo = "Torso";  // Solo para fines de ejemplo
                    if (probabilidad <= jugador.obtenerProbabilidadPunteria(parteCuerpo)) {
                        cout << atacante << " atacó a " << objetivo << " en el " << parteCuerpo << " ¡Éxito!\n";
                    } else {
                        cout << atacante << " falló el ataque a " << objetivo << ".\n";
                    }
                }
            }
        }
    }
};

int main() {
    srand(time(0));

    // Menú de opciones
    cout << "Selecciona una opcion para el tablero:\n";
    cout << "1. Tablero aleatorio entre 3x4 y 10x10\n";
    cout << "2. Tablero estandar de 7x4\n";
    cout << "Opcion: ";

    int opcion;
    cin >> opcion;

    if (opcion == 1) {
        // Aquí deberías definir la lógica de crearTableroAleatorio y crearTableroEstandar
        // Poniendo código similar al anterior
    } else if (opcion == 2) {
        // Similar para Tablero estándar
    } else {
        cout << "Opcion no valida. Por favor selecciona 1 o 2.\n";
    }

    return 0;
}
